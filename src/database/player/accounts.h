// generated by ddl2cpp.py player_accounts.sql accounts player
#ifndef PLAYER_ACCOUNTS_H
#define PLAYER_ACCOUNTS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace player
{
    namespace PlayerAccounts_
    {
        struct UserId
        {
            struct _alias_t
            {
                static constexpr const char _literal[] =  "user_id";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template<typename T>
                struct _member_t
                {
                    T userId;
                    T& operator()() { return userId; }
                    const T& operator()() const { return userId; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
        };
        struct Id_
        {
            struct _alias_t
            {
                static constexpr const char _literal[] =  "id_";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template<typename T>
                struct _member_t
                {
                    T id_;
                    T& operator()() { return id_; }
                    const T& operator()() const { return id_; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Name
        {
            struct _alias_t
            {
                static constexpr const char _literal[] =  "name";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template<typename T>
                struct _member_t
                {
                    T name;
                    T& operator()() { return name; }
                    const T& operator()() const { return name; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Guest
        {
            struct _alias_t
            {
                static constexpr const char _literal[] =  "guest";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template<typename T>
                struct _member_t
                {
                    T guest;
                    T& operator()() { return guest; }
                    const T& operator()() const { return guest; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
        };
        struct RegisterIp
        {
            struct _alias_t
            {
                static constexpr const char _literal[] =  "register_ip";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template<typename T>
                struct _member_t
                {
                    T registerIp;
                    T& operator()() { return registerIp; }
                    const T& operator()() const { return registerIp; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct LoginIp
        {
            struct _alias_t
            {
                static constexpr const char _literal[] =  "login_ip";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template<typename T>
                struct _member_t
                {
                    T loginIp;
                    T& operator()() { return loginIp; }
                    const T& operator()() const { return loginIp; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Mac
        {
            struct _alias_t
            {
                static constexpr const char _literal[] =  "mac";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template<typename T>
                struct _member_t
                {
                    T mac;
                    T& operator()() { return mac; }
                    const T& operator()() const { return mac; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Password
        {
            struct _alias_t
            {
                static constexpr const char _literal[] =  "password";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template<typename T>
                struct _member_t
                {
                    T password;
                    T& operator()() { return password; }
                    const T& operator()() const { return password; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
        struct Rid
        {
            struct _alias_t
            {
                static constexpr const char _literal[] =  "rid";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template<typename T>
                struct _member_t
                {
                    T rid;
                    T& operator()() { return rid; }
                    const T& operator()() const { return rid; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
        };
        struct Wk
        {
            struct _alias_t
            {
                static constexpr const char _literal[] =  "wk";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template<typename T>
                struct _member_t
                {
                    T wk;
                    T& operator()() { return wk; }
                    const T& operator()() const { return wk; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
        };
    } // namespace PlayerAccounts_

    struct PlayerAccounts: sqlpp::table_t<PlayerAccounts,
            PlayerAccounts_::UserId,
            PlayerAccounts_::Id_,
            PlayerAccounts_::Name,
            PlayerAccounts_::Guest,
            PlayerAccounts_::RegisterIp,
            PlayerAccounts_::LoginIp,
            PlayerAccounts_::Mac,
            PlayerAccounts_::Password,
            PlayerAccounts_::Rid,
            PlayerAccounts_::Wk>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] =  "player.accounts";
            using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template<typename T>
            struct _member_t
            {
                T playerAccounts;
                T& operator()() { return playerAccounts; }
                const T& operator()() const { return playerAccounts; }
            };
        };
    };
} // namespace player
#endif
